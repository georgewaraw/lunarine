let app,light,geometry,material,shader,mesh,input;const getInt=(e,t)=>Math.floor(Math.random()*(t-e)+e),getColor=e=>{let t=10;switch(e){case"bright":t*=2;case"normal":t*=2;case"dark":t*=2}return`hsl(${getInt(0,360)}, ${getInt(0,101)}%, ${t}%)`};function init(){(app={renderer:null,camera:null,scene:null,composer:null,pass:null,time:null}).renderer=new THREE.WebGLRenderer({canvas:document.getElementsByTagName("canvas")[0]}),app.renderer.setPixelRatio(.2),app.renderer.setSize(window.innerWidth,window.innerHeight),app.renderer.setClearColor(getColor("bright")),app.renderer.shadowMap.enabled=!0,app.camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,.1,1e3),app.camera.position.set(0,10,7.5),app.scene=new THREE.Scene,app.scene.add(app.camera),level(),post(),inter(),anim()}function level(){light={ambient:null,point:null};let e=getColor("bright");light.ambient=new THREE.AmbientLight(e,.5),app.scene.add(light.ambient),light.point=new THREE.PointLight(e,.5,100),light.point.position.set(5,5,5),light.point.castShadow=!0,light.point.shadow.mapSize=new THREE.Vector2(512,512),app.camera.add(light.point),material={planet:null,tree:null},shader={planet:null,tree:null},mesh={planet:null,tree:null};(geometry={planet:null,tree:null}).planet=new THREE.SphereGeometry(10,24,24);const t=new THREE.Color(getColor("dark")),n=new THREE.Color(getColor("bright"));geometry.planet.faces.forEach((e,a)=>e.color=a%2?t:n),material.planet=new THREE.MeshLambertMaterial({vertexColors:THREE.FaceColors}),material.planet.onBeforeCompile=(e=>{shader.planet=e,e.uniforms.uTime={value:0},e.uniforms.uMorph={value:10},e.uniforms.uDistort={value:0},e.vertexShader="\n    uniform float uTime;\n    uniform float uMorph;\n    uniform float uDistort;\n  "+e.vertexShader,e.vertexShader=e.vertexShader.replace("#include <begin_vertex>","\n    vec3 transformed = vec3(position);\n\n    transformed.x += sin((position.x + uTime * .375) * 20.) * .0015 * uMorph;\n    transformed.y += sin((position.y + uTime * .375) * 20.) * .0015 * uMorph;\n    transformed.z += sin((position.z + uTime * .375) * 20.) * .0015 * uMorph;\n\n    if (uDistort > 0.) {\n      transformed.x += fract(sin(dot(position.x + uTime * .00000025, (12.9898, 78.233))) * 43758.5453123) * uDistort;\n      transformed.y += fract(sin(dot(position.x + uTime * .00000025, (12.9898, 78.233))) * 43758.5453123) * uDistort;\n      transformed.z += fract(sin(dot(position.x + uTime * .00000025, (12.9898, 78.233))) * 43758.5453123) * uDistort;\n    }\n  ")}),mesh.planet=new THREE.Mesh(geometry.planet,material.planet),app.scene.add(mesh.planet),geometry.tree=new THREE.Geometry,geometry.planet.faces.forEach((e,t)=>{if(!(t%20)){let t=new THREE.PlaneGeometry(2,1);t.rotateY(270*Math.PI/180),t.lookAt(e.normal),t.translate(10*e.normal.x,10*e.normal.y,10*e.normal.z),geometry.tree.merge(t)}}),material.tree=new THREE.MeshLambertMaterial({side:THREE.DoubleSide,depthWrite:!1,transparent:!0,opacity:.75}),mesh.tree=new THREE.Mesh(geometry.tree,material.tree),app.scene.add(mesh.tree)}function post(){app.composer=new THREE.EffectComposer(app.renderer),app.composer.addPass(new THREE.RenderPass(app.scene,app.camera)),app.composer.addPass(app.pass=new THREE.Post),app.pass.renderToScreen=!0}function inter(){window.onorientationchange=(()=>location.reload()),window.onresize=(()=>{app.renderer.setSize(window.innerWidth,window.innerHeight),app.camera.aspect=window.innerWidth/window.innerHeight,app.camera.updateProjectionMatrix(),app.pass.setSize(window.innerWidth,window.innerHeight),app.composer.reset()}),(input={touch:{start:{x:null,y:null},end:{x:null,y:null}},isEnabled:null}).isEnabled=!0;const e=e=>{if(input.isEnabled)switch(input.isEnabled=!1,e){case"up":new TWEEN.Tween(mesh.planet.rotation).to({x:mesh.planet.rotation.x+.5},250).easing(TWEEN.Easing.Quadratic.Out).onComplete(()=>input.isEnabled=!0).start(),new TWEEN.Tween(mesh.tree.rotation).to({x:mesh.tree.rotation.x+.5},250).easing(TWEEN.Easing.Quadratic.Out).start();break;case"down":new TWEEN.Tween(mesh.planet.rotation).to({z:mesh.planet.rotation.z+90*Math.PI/180},250).easing(TWEEN.Easing.Quadratic.Out).onComplete(()=>input.isEnabled=!0).start(),new TWEEN.Tween(mesh.tree.rotation).to({z:mesh.tree.rotation.z+90*Math.PI/180},250).easing(TWEEN.Easing.Quadratic.Out).start()}};window.ontouchstart=(e=>{input.touch.start.x=e.changedTouches[0].clientX/window.innerWidth*2-1,input.touch.start.y=e.changedTouches[0].clientY/window.innerHeight*-2+1}),window.ontouchend=(t=>{input.touch.end.x=t.changedTouches[0].clientX/window.innerWidth*2-1,input.touch.end.y=t.changedTouches[0].clientY/window.innerHeight*-2+1,input.touch.start.x-input.touch.end.x>.25?e("right"):input.touch.start.x-input.touch.end.x<-.25&&e("left"),input.touch.start.y-input.touch.end.y>.25?e("down"):input.touch.start.y-input.touch.end.y<-.25&&e("up")}),document.getElementsByTagName("canvas")[0].ontouchstart=(e=>e.preventDefault()),window.onkeydown=(t=>{switch(t.code){case"ArrowUp":case"KeyW":e("up");break;case"ArrowDown":case"KeyS":e("down")}})}function anim(e){requestAnimationFrame(anim),TWEEN.update(),app.time=e/1e3,Object.keys(shader).forEach(e=>{shader[e]&&(shader[e].uniforms.uTime.value=app.time)}),app.pass.shaderMaterial.uniforms.uTime.value=app.time,app.composer.render()}